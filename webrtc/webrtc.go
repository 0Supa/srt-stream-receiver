package webrtc

import (
	"bufio"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/pion/webrtc/v4"
)

var VideoTrack *webrtc.TrackLocalStaticRTP

func Startup() {
	fmt.Println("startup")
	peerConnection, err := webrtc.NewPeerConnection(webrtc.Configuration{
		ICEServers: []webrtc.ICEServer{
			{
				URLs: []string{"stun:stun.l.google.com:19302"},
			},
		},
	})
	if err != nil {
		panic(err)
	}

	// Create a video track
	VideoTrack, err = webrtc.NewTrackLocalStaticRTP(webrtc.RTPCodecCapability{MimeType: webrtc.MimeTypeH264}, "video", "pion")
	if err != nil {
		panic(err)
	}
	sender, err := peerConnection.AddTrack(VideoTrack)
	if err != nil {
		panic(err)
	}

	go func() {
		buf := make([]byte, 1500)
		for {
			if _, _, rtcpErr := sender.Read(buf); rtcpErr != nil {
				return
			}
		}
	}()

	// Set the handler for ICE connection state
	// This will notify you when the peer has connected/disconnected
	peerConnection.OnICEConnectionStateChange(func(connectionState webrtc.ICEConnectionState) {
		fmt.Printf("Connection State has changed %s \n", connectionState.String())

		if connectionState == webrtc.ICEConnectionStateFailed {
			if closeErr := peerConnection.Close(); closeErr != nil {
				panic(closeErr)
			}
		}
	})
	fmt.Println("1")

	// Wait for the offer to be pasted
	offer := webrtc.SessionDescription{}
	decode("eyJ0eXBlIjoib2ZmZXIiLCJzZHAiOiJ2PTBcclxubz0tIDI4NDk2MTYyNjc4ODc1NDYwNjQgMiBJTiBJUDQgMTI3LjAuMC4xXHJcbnM9LVxyXG50PTAgMFxyXG5hPWdyb3VwOkJVTkRMRSAwXHJcbmE9ZXh0bWFwLWFsbG93LW1peGVkXHJcbmE9bXNpZC1zZW1hbnRpYzogV01TXHJcbm09dmlkZW8gNTMzOTMgVURQL1RMUy9SVFAvU0FWUEYgOTYgOTcgOTggOTkgMTAwIDEwMSAzNSAzNiAzNyAzOCAxMDIgMTAzIDEwNCAxMDUgMTA2IDEwNyAxMDggMTA5IDEyNyAxMjUgMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggMTEyIDExMyAxMTQgNDlcclxuYz1JTiBJUDQgNzkuMTE4LjM0LjE0N1xyXG5hPXJ0Y3A6OSBJTiBJUDQgMC4wLjAuMFxyXG5hPWNhbmRpZGF0ZTo2MTQzMDcwOTQgMSB1ZHAgMjExMzkzNzE1MSBlZGE2NmU0Yi1mOThkLTRmZjEtYmQ3Ny1lYzIwMjA1NjRiZmIubG9jYWwgNTMzOTMgdHlwIGhvc3QgZ2VuZXJhdGlvbiAwIG5ldHdvcmstY29zdCA5OTlcclxuYT1jYW5kaWRhdGU6MjUxMDUxNTcxMSAxIHVkcCAyMTEzOTM5NzExIDVhZmE0NzAyLWE2ZmYtNGY2Yy1hZjY5LTNlNWIyYTM5MTkxOC5sb2NhbCA1OTY4OSB0eXAgaG9zdCBnZW5lcmF0aW9uIDAgbmV0d29yay1jb3N0IDk5OVxyXG5hPWNhbmRpZGF0ZTo0MTM1Mjc5MjkgMSB1ZHAgMTY3NzczMjA5NSAyYTAyOjJmMDg6YzMwNDozNjAwOjNiMjQ6MTIwYzpmM2Y3OjMxOWEgNTk2ODkgdHlwIHNyZmx4IHJhZGRyIDo6IHJwb3J0IDAgZ2VuZXJhdGlvbiAwIG5ldHdvcmstY29zdCA5OTlcclxuYT1jYW5kaWRhdGU6MTc5MDM4Mjk4NiAxIHVkcCAxNjc3NzI5NTM1IDc5LjExOC4zNC4xNDcgNTMzOTMgdHlwIHNyZmx4IHJhZGRyIDAuMC4wLjAgcnBvcnQgMCBnZW5lcmF0aW9uIDAgbmV0d29yay1jb3N0IDk5OVxyXG5hPWljZS11ZnJhZzpTRFlEXHJcbmE9aWNlLXB3ZDo3QUVjWFkzdENDSEQvZmtYSUNSM3psRTlcclxuYT1pY2Utb3B0aW9uczp0cmlja2xlXHJcbmE9ZmluZ2VycHJpbnQ6c2hhLTI1NiAzMDo3Mzo2Qjo3OToyQzo1QTpEMDpGRDo0NjoyMzpDQjo5Qjo2MDo2NjpGMzo1Mzo1Qjo4OToxNzo1NDoyNDowQTo3MjoxODo4ODoyNzpCNTpEMjoxMTo2QzowQTo3QlxyXG5hPXNldHVwOmFjdHBhc3NcclxuYT1taWQ6MFxyXG5hPWV4dG1hcDoxIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnRvZmZzZXRcclxuYT1leHRtYXA6MiBodHRwOi8vd3d3LndlYnJ0Yy5vcmcvZXhwZXJpbWVudHMvcnRwLWhkcmV4dC9hYnMtc2VuZC10aW1lXHJcbmE9ZXh0bWFwOjMgdXJuOjNncHA6dmlkZW8tb3JpZW50YXRpb25cclxuYT1leHRtYXA6NCBodHRwOi8vd3d3LmlldGYub3JnL2lkL2RyYWZ0LWhvbG1lci1ybWNhdC10cmFuc3BvcnQtd2lkZS1jYy1leHRlbnNpb25zLTAxXHJcbmE9ZXh0bWFwOjUgaHR0cDovL3d3dy53ZWJydGMub3JnL2V4cGVyaW1lbnRzL3J0cC1oZHJleHQvcGxheW91dC1kZWxheVxyXG5hPWV4dG1hcDo2IGh0dHA6Ly93d3cud2VicnRjLm9yZy9leHBlcmltZW50cy9ydHAtaGRyZXh0L3ZpZGVvLWNvbnRlbnQtdHlwZVxyXG5hPWV4dG1hcDo3IGh0dHA6Ly93d3cud2VicnRjLm9yZy9leHBlcmltZW50cy9ydHAtaGRyZXh0L3ZpZGVvLXRpbWluZ1xyXG5hPWV4dG1hcDo4IGh0dHA6Ly93d3cud2VicnRjLm9yZy9leHBlcmltZW50cy9ydHAtaGRyZXh0L2NvbG9yLXNwYWNlXHJcbmE9ZXh0bWFwOjkgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6c2RlczptaWRcclxuYT1leHRtYXA6MTAgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6c2RlczpydHAtc3RyZWFtLWlkXHJcbmE9ZXh0bWFwOjExIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnNkZXM6cmVwYWlyZWQtcnRwLXN0cmVhbS1pZFxyXG5hPXJlY3Zvbmx5XHJcbmE9cnRjcC1tdXhcclxuYT1ydGNwLXJzaXplXHJcbmE9cnRwbWFwOjk2IFZQOC85MDAwMFxyXG5hPXJ0Y3AtZmI6OTYgZ29vZy1yZW1iXHJcbmE9cnRjcC1mYjo5NiB0cmFuc3BvcnQtY2NcclxuYT1ydGNwLWZiOjk2IGNjbSBmaXJcclxuYT1ydGNwLWZiOjk2IG5hY2tcclxuYT1ydGNwLWZiOjk2IG5hY2sgcGxpXHJcbmE9cnRwbWFwOjk3IHJ0eC85MDAwMFxyXG5hPWZtdHA6OTcgYXB0PTk2XHJcbmE9cnRwbWFwOjk4IFZQOS85MDAwMFxyXG5hPXJ0Y3AtZmI6OTggZ29vZy1yZW1iXHJcbmE9cnRjcC1mYjo5OCB0cmFuc3BvcnQtY2NcclxuYT1ydGNwLWZiOjk4IGNjbSBmaXJcclxuYT1ydGNwLWZiOjk4IG5hY2tcclxuYT1ydGNwLWZiOjk4IG5hY2sgcGxpXHJcbmE9Zm10cDo5OCBwcm9maWxlLWlkPTBcclxuYT1ydHBtYXA6OTkgcnR4LzkwMDAwXHJcbmE9Zm10cDo5OSBhcHQ9OThcclxuYT1ydHBtYXA6MTAwIFZQOS85MDAwMFxyXG5hPXJ0Y3AtZmI6MTAwIGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6MTAwIHRyYW5zcG9ydC1jY1xyXG5hPXJ0Y3AtZmI6MTAwIGNjbSBmaXJcclxuYT1ydGNwLWZiOjEwMCBuYWNrXHJcbmE9cnRjcC1mYjoxMDAgbmFjayBwbGlcclxuYT1mbXRwOjEwMCBwcm9maWxlLWlkPTJcclxuYT1ydHBtYXA6MTAxIHJ0eC85MDAwMFxyXG5hPWZtdHA6MTAxIGFwdD0xMDBcclxuYT1ydHBtYXA6MzUgVlA5LzkwMDAwXHJcbmE9cnRjcC1mYjozNSBnb29nLXJlbWJcclxuYT1ydGNwLWZiOjM1IHRyYW5zcG9ydC1jY1xyXG5hPXJ0Y3AtZmI6MzUgY2NtIGZpclxyXG5hPXJ0Y3AtZmI6MzUgbmFja1xyXG5hPXJ0Y3AtZmI6MzUgbmFjayBwbGlcclxuYT1mbXRwOjM1IHByb2ZpbGUtaWQ9MVxyXG5hPXJ0cG1hcDozNiBydHgvOTAwMDBcclxuYT1mbXRwOjM2IGFwdD0zNVxyXG5hPXJ0cG1hcDozNyBWUDkvOTAwMDBcclxuYT1ydGNwLWZiOjM3IGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6MzcgdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjozNyBjY20gZmlyXHJcbmE9cnRjcC1mYjozNyBuYWNrXHJcbmE9cnRjcC1mYjozNyBuYWNrIHBsaVxyXG5hPWZtdHA6MzcgcHJvZmlsZS1pZD0zXHJcbmE9cnRwbWFwOjM4IHJ0eC85MDAwMFxyXG5hPWZtdHA6MzggYXB0PTM3XHJcbmE9cnRwbWFwOjEwMiBIMjY0LzkwMDAwXHJcbmE9cnRjcC1mYjoxMDIgZ29vZy1yZW1iXHJcbmE9cnRjcC1mYjoxMDIgdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjoxMDIgY2NtIGZpclxyXG5hPXJ0Y3AtZmI6MTAyIG5hY2tcclxuYT1ydGNwLWZiOjEwMiBuYWNrIHBsaVxyXG5hPWZtdHA6MTAyIGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTE7cGFja2V0aXphdGlvbi1tb2RlPTE7cHJvZmlsZS1sZXZlbC1pZD00MjAwMWZcclxuYT1ydHBtYXA6MTAzIHJ0eC85MDAwMFxyXG5hPWZtdHA6MTAzIGFwdD0xMDJcclxuYT1ydHBtYXA6MTA0IEgyNjQvOTAwMDBcclxuYT1ydGNwLWZiOjEwNCBnb29nLXJlbWJcclxuYT1ydGNwLWZiOjEwNCB0cmFuc3BvcnQtY2NcclxuYT1ydGNwLWZiOjEwNCBjY20gZmlyXHJcbmE9cnRjcC1mYjoxMDQgbmFja1xyXG5hPXJ0Y3AtZmI6MTA0IG5hY2sgcGxpXHJcbmE9Zm10cDoxMDQgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MTtwYWNrZXRpemF0aW9uLW1vZGU9MDtwcm9maWxlLWxldmVsLWlkPTQyMDAxZlxyXG5hPXJ0cG1hcDoxMDUgcnR4LzkwMDAwXHJcbmE9Zm10cDoxMDUgYXB0PTEwNFxyXG5hPXJ0cG1hcDoxMDYgSDI2NC85MDAwMFxyXG5hPXJ0Y3AtZmI6MTA2IGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6MTA2IHRyYW5zcG9ydC1jY1xyXG5hPXJ0Y3AtZmI6MTA2IGNjbSBmaXJcclxuYT1ydGNwLWZiOjEwNiBuYWNrXHJcbmE9cnRjcC1mYjoxMDYgbmFjayBwbGlcclxuYT1mbXRwOjEwNiBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xO3BhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDJlMDFmXHJcbmE9cnRwbWFwOjEwNyBydHgvOTAwMDBcclxuYT1mbXRwOjEwNyBhcHQ9MTA2XHJcbmE9cnRwbWFwOjEwOCBIMjY0LzkwMDAwXHJcbmE9cnRjcC1mYjoxMDggZ29vZy1yZW1iXHJcbmE9cnRjcC1mYjoxMDggdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjoxMDggY2NtIGZpclxyXG5hPXJ0Y3AtZmI6MTA4IG5hY2tcclxuYT1ydGNwLWZiOjEwOCBuYWNrIHBsaVxyXG5hPWZtdHA6MTA4IGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTE7cGFja2V0aXphdGlvbi1tb2RlPTA7cHJvZmlsZS1sZXZlbC1pZD00MmUwMWZcclxuYT1ydHBtYXA6MTA5IHJ0eC85MDAwMFxyXG5hPWZtdHA6MTA5IGFwdD0xMDhcclxuYT1ydHBtYXA6MTI3IEgyNjQvOTAwMDBcclxuYT1ydGNwLWZiOjEyNyBnb29nLXJlbWJcclxuYT1ydGNwLWZiOjEyNyB0cmFuc3BvcnQtY2NcclxuYT1ydGNwLWZiOjEyNyBjY20gZmlyXHJcbmE9cnRjcC1mYjoxMjcgbmFja1xyXG5hPXJ0Y3AtZmI6MTI3IG5hY2sgcGxpXHJcbmE9Zm10cDoxMjcgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MTtwYWNrZXRpemF0aW9uLW1vZGU9MTtwcm9maWxlLWxldmVsLWlkPTRkMDAxZlxyXG5hPXJ0cG1hcDoxMjUgcnR4LzkwMDAwXHJcbmE9Zm10cDoxMjUgYXB0PTEyN1xyXG5hPXJ0cG1hcDozOSBIMjY0LzkwMDAwXHJcbmE9cnRjcC1mYjozOSBnb29nLXJlbWJcclxuYT1ydGNwLWZiOjM5IHRyYW5zcG9ydC1jY1xyXG5hPXJ0Y3AtZmI6MzkgY2NtIGZpclxyXG5hPXJ0Y3AtZmI6MzkgbmFja1xyXG5hPXJ0Y3AtZmI6MzkgbmFjayBwbGlcclxuYT1mbXRwOjM5IGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTE7cGFja2V0aXphdGlvbi1tb2RlPTA7cHJvZmlsZS1sZXZlbC1pZD00ZDAwMWZcclxuYT1ydHBtYXA6NDAgcnR4LzkwMDAwXHJcbmE9Zm10cDo0MCBhcHQ9MzlcclxuYT1ydHBtYXA6NDEgSDI2NC85MDAwMFxyXG5hPXJ0Y3AtZmI6NDEgZ29vZy1yZW1iXHJcbmE9cnRjcC1mYjo0MSB0cmFuc3BvcnQtY2NcclxuYT1ydGNwLWZiOjQxIGNjbSBmaXJcclxuYT1ydGNwLWZiOjQxIG5hY2tcclxuYT1ydGNwLWZiOjQxIG5hY2sgcGxpXHJcbmE9Zm10cDo0MSBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xO3BhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9ZjQwMDFmXHJcbmE9cnRwbWFwOjQyIHJ0eC85MDAwMFxyXG5hPWZtdHA6NDIgYXB0PTQxXHJcbmE9cnRwbWFwOjQzIEgyNjQvOTAwMDBcclxuYT1ydGNwLWZiOjQzIGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6NDMgdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjo0MyBjY20gZmlyXHJcbmE9cnRjcC1mYjo0MyBuYWNrXHJcbmE9cnRjcC1mYjo0MyBuYWNrIHBsaVxyXG5hPWZtdHA6NDMgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MTtwYWNrZXRpemF0aW9uLW1vZGU9MDtwcm9maWxlLWxldmVsLWlkPWY0MDAxZlxyXG5hPXJ0cG1hcDo0NCBydHgvOTAwMDBcclxuYT1mbXRwOjQ0IGFwdD00M1xyXG5hPXJ0cG1hcDo0NSBBVjEvOTAwMDBcclxuYT1ydGNwLWZiOjQ1IGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6NDUgdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjo0NSBjY20gZmlyXHJcbmE9cnRjcC1mYjo0NSBuYWNrXHJcbmE9cnRjcC1mYjo0NSBuYWNrIHBsaVxyXG5hPWZtdHA6NDUgbGV2ZWwtaWR4PTU7cHJvZmlsZT0wO3RpZXI9MFxyXG5hPXJ0cG1hcDo0NiBydHgvOTAwMDBcclxuYT1mbXRwOjQ2IGFwdD00NVxyXG5hPXJ0cG1hcDo0NyBBVjEvOTAwMDBcclxuYT1ydGNwLWZiOjQ3IGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6NDcgdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjo0NyBjY20gZmlyXHJcbmE9cnRjcC1mYjo0NyBuYWNrXHJcbmE9cnRjcC1mYjo0NyBuYWNrIHBsaVxyXG5hPWZtdHA6NDcgbGV2ZWwtaWR4PTU7cHJvZmlsZT0xO3RpZXI9MFxyXG5hPXJ0cG1hcDo0OCBydHgvOTAwMDBcclxuYT1mbXRwOjQ4IGFwdD00N1xyXG5hPXJ0cG1hcDoxMTIgcmVkLzkwMDAwXHJcbmE9cnRwbWFwOjExMyBydHgvOTAwMDBcclxuYT1mbXRwOjExMyBhcHQ9MTEyXHJcbmE9cnRwbWFwOjExNCB1bHBmZWMvOTAwMDBcclxuYT1ydHBtYXA6NDkgZmxleGZlYy0wMy85MDAwMFxyXG5hPXJ0Y3AtZmI6NDkgZ29vZy1yZW1iXHJcbmE9cnRjcC1mYjo0OSB0cmFuc3BvcnQtY2NcclxuYT1mbXRwOjQ5IHJlcGFpci13aW5kb3c9MTAwMDAwMDBcclxuIn0=", &offer)
	fmt.Println("2")

	// Set the remote SessionDescription
	if err = peerConnection.SetRemoteDescription(offer); err != nil {
		panic(err)
	}
	fmt.Println("3")

	// Create answer
	answer, err := peerConnection.CreateAnswer(nil)
	if err != nil {
		panic(err)
	}
	fmt.Printf("%v\n", answer)

	// Create channel that is blocked until ICE Gathering is complete
	gatherComplete := webrtc.GatheringCompletePromise(peerConnection)

	// Sets the LocalDescription, and starts our UDP listeners
	if err = peerConnection.SetLocalDescription(answer); err != nil {
		panic(err)
	}

	// Block until ICE Gathering is complete, disabling trickle ICE
	// we do this because we only can exchange one signaling message
	// in a production application you should exchange ICE Candidates via OnICECandidate
	<-gatherComplete

	// Output the answer in base64 so we can paste it in browser
	fmt.Println(encode(peerConnection.LocalDescription()))
}

// Read from stdin until we get a newline
func readUntilNewline() (in string) {
	var err error

	r := bufio.NewReader(os.Stdin)
	for {
		in, err = r.ReadString('\n')
		if err != nil && !errors.Is(err, io.EOF) {
			panic(err)
		}

		if in = strings.TrimSpace(in); len(in) > 0 {
			break
		}
	}

	fmt.Println("")
	return
}

// JSON encode + base64 a SessionDescription
func encode(obj *webrtc.SessionDescription) string {
	b, err := json.Marshal(obj)
	if err != nil {
		panic(err)
	}

	return base64.StdEncoding.EncodeToString(b)
}

// Decode a base64 and unmarshal JSON into a SessionDescription
func decode(in string, obj *webrtc.SessionDescription) {
	fmt.Println(in)
	b, err := base64.StdEncoding.DecodeString(in)
	if err != nil {
		panic(err)
	}

	if err = json.Unmarshal(b, obj); err != nil {
		panic(err)
	}
}
